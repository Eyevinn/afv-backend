import { Static, Type } from '@sinclair/typebox';
import { FastifyPluginCallback } from 'fastify';
import { IncomingWebhook } from '@slack/webhook';
import { generateJwtToken } from './utils/jwt';

const NewTokenRequest = Type.Object({
  company: Type.String({ description: 'Name of the company' }),
  email: Type.String({ description: 'Email to account holder' })
});

export interface ApiTokenOpts {
  slackWebHookUrl?: URL;
}

const apiToken: FastifyPluginCallback<ApiTokenOpts> = (fastify, opts, next) => {
  let webHook: IncomingWebhook;

  if (opts.slackWebHookUrl) {
    webHook = new IncomingWebhook(opts.slackWebHookUrl.toString());
  }

  fastify.post<{
    Body: Static<typeof NewTokenRequest>;
    Reply: string;
  }>(
    '/token',
    {
      schema: {
        description: 'Generate a trial token',
        body: NewTokenRequest,
        response: {
          200: Type.String()
        }
      }
    },
    async (request, reply) => {
      try {
        const body = request.body;
        const trialToken = generateJwtToken(
          body.company.replace(/\s+/g, '_'),
          3,
          body.email
        );
        reply.send(trialToken);
        if (webHook) {
          await webHook.send({
            text: `A Channel Engine trial-token was generated by ${body.email} for company '${body.company}''`
          });
        }
      } catch (err) {
        reply
          .code(500)
          .send('Exception thrown when trying to generate trial token: ' + err);
      }
    }
  );

  next();
};

export default apiToken;